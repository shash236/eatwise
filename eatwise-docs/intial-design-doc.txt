Eatwise - Backend Architecture and Design Overview

- Project Overview
    - Eatwise is an AI-integrated meal and weight tracking application. It provides intelligent meal suggestions, personalized reviews, and habit streaks, driven by backend services and AI logic.

Features
    - Add meals and rate them
    - Track personal info and eating habits
    - Daily reviews and suggestions via AI
    - Calendar view with streaks
    - Dashboard showing weight and meal trends

- API Design
    - POST
        - /api/v1/meal
        Request Body:
            - timestamp
            - question_template
            - user_response
            - meal_type
            - meal_time

        - /api/v1/meal-analysis
            Request Body:
                - contextMessage

        - /api/v1/trackers?type=...
            Body:
                - value
                - unit

GET
	- /api/v1/calendar?months=n
	- /api/v1/meal?date=yyyy-mm-dd
	- /api/v1/suggestions
	- /api/v1/trackers/{type} (last_7, last_month, last_year)


Class Structure
    - meal: add/edit meal logic
    - service: AI scoring, calendar sync, dashboard
    - suggestion: generation and caching
    - dashboard: AI reviews, weight graph
    - infra: DB config, Redis, event system
    - user: auth, preferences, onboarding
    - ai: interface to LLM providers (e.g., OpenAI)

DTO Layering
    - Request DTOs: represent incoming HTTP request bodies
    - Command DTOs: capture internal intention
    - Result DTOs: from service to controller
    - Response DTOs: response shape to client

DB Design (Simplified)
- meal
    - id
    - user_id
    - timestamp
    - type
    - notes


- meal_review
	- meal_id
	- score
	- ai_review
	- date

- day_review
	- user_id
	- date
	- summary
	- ai_generated_review

- calendar
	- user_id
	- month
	- value

- suggestion
	- user_id
	- suggestion_text
	- is_latest

- trackers
	- user_id
	- type (water/weight)
	- value
	- unit
	- timestamp

AI Tasks
    - Generate suggestions
    - Review meal sentiment
    - Summarize daily health info

Next Steps
    - Mock sample responses for each API
    - Hook OpenAI or another model provider
    - Build Android UI with Kotlin/Java
    - Refine DB schema and relationships
    - Implement retry/timeout flow for async events
